generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  passwordHash String?        @map("password_hash")
  avatarUrl    String?        @map("avatar_url")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  tokens       Token[]
  transactions Transaction[]
  wallets      Wallet[]
  investiments Investiments[]
  creditCarts  CreditCard[]
  categories   Category[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

enum Role {
  ADMIN
  MEMBER
}

enum TransactionType {
  INCOME
  EXPENSE
  INVESTIMENT
}

enum InvestimentsType {
  STOCKS
  CRYPTO
  FUND
  OTHER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  icon        String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  Transaction Transaction[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("categories")
}

model Transaction {
  id          String          @id @default(uuid())
  type        TransactionType
  amount      Float
  description String?
  date        DateTime
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  isRepet     Boolean         @default(false) @map("is_repet")
  repetTimes  Int?            @map("repet_times")

  user           User          @relation(fields: [userId], references: [id])
  userId         String        @map("user_id")
  category       Category?     @relation(fields: [categoryId], references: [id])
  categoryId     String?       @map("category_id")
  wallet         Wallet?       @relation(fields: [walletId], references: [id])
  walletId       String?       @map("wallet_id")
  creditCard     CreditCard?   @relation(fields: [creditCardId], references: [id])
  creditCardId   String?       @map("credit_card_id")
  investiment    Investiments? @relation(fields: [investimentsId], references: [id])
  investimentsId String?       @map("investiments_id")

  @@map("transactions")
}

model Wallet {
  id        String   @id @default(uuid())
  name      String   @unique
  balance   Float
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user        User          @relation(fields: [userId], references: [id])
  userId      String        @map("user_id")
  transaction Transaction[]

  @@map("wallets")
}

model Investiments {
  id          String           @id @default(uuid())
  type        InvestimentsType
  name        String
  balance     Float
  description String?
  date        DateTime
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  transactions Transaction[]

  @@map("investiments")
}

model CreditCard {
  id               String   @id @default(uuid())
  name             String
  ownerCurrentName String   @map("owner_current_name")
  number           String   @unique
  cvv              String
  expiration       String
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user         User          @relation(fields: [userId], references: [id])
  userId       String        @map("user_id")
  transactions Transaction[]

  @@map("credit_cards")
}
